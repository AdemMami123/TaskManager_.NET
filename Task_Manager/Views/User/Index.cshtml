@model List<Task_Manager.Models.UserWithRoleViewModel>

@{
    ViewData["Title"] = "Users Management";
}

<div class="container mt-4">
    <div class="card shadow-lg">
        <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
            <h4 class="mb-0">Users Management</h4>
            <i class="bi bi-people-fill fs-3"></i>
        </div>
        <div class="card-body">
            <table class="table table-hover table-striped table-bordered">
                <thead class="table-dark">
                    <tr>
                        <th>#</th>
                        <th>Email</th>
                        <th>Roles</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @if (Model.Any())
                    {
                        int count = 1;
                        @foreach (var user in Model)
                        {
                            <tr>
                                <td>@count</td>
                                <td>@user.Email</td>
                                <td>
                                    <select class="form-select role-dropdown" data-user-id="@user.Id">
                                        @if (user.Roles.Contains("Admin"))
                                        {
                                            <option value="Admin" selected>Admin</option>
                                        }
                                        else
                                        {
                                            <option value="Admin">Admin</option>
                                        }

                                        @if (user.Roles.Contains("Manager"))
                                        {
                                            <option value="Manager" selected>Manager</option>
                                        }
                                        else
                                        {
                                            <option value="Manager">Manager</option>
                                        }

                                        @if (user.Roles.Contains("Developer"))
                                        {
                                            <option value="Developer" selected>Developer</option>
                                        }
                                        else
                                        {
                                            <option value="Developer">Developer</option>
                                        }
                                    </select>
                                </td>
                                <td>
                                    <button class="btn btn-success btn-sm save-role-btn" data-user-id="@user.Id">
                                        <i class="bi bi-save"></i> Save
                                    </button>
                                    <button class="btn btn-danger btn-sm delete-user-btn" data-user-id="@user.Id">
                                        <i class="bi bi-trash"></i> Delete
                                    </button>
                                </td>
                            </tr>
                            count++;
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="4" class="text-center text-muted">No users found</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <script>
        document.querySelectorAll(".save-role-btn").forEach(button => {
            button.addEventListener("click", function () {
                let userId = this.getAttribute("data-user-id");
                let selectedRole = document.querySelector(`.role-dropdown[data-user-id='${userId}']`).value;

                Swal.fire({
                    title: "Are you sure?",
                    text: "You are about to change this user's role.",
                    icon: "warning",
                    showCancelButton: true,
                    confirmButtonColor: "#3085d6",
                    cancelButtonColor: "#d33",
                    confirmButtonText: "Yes, update role!"
                }).then((result) => {
                    if (result.isConfirmed) {
                        fetch('/User/UpdateUserRole', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'RequestVerificationToken': document.querySelector("input[name='__RequestVerificationToken']").value
                            },
                            body: JSON.stringify({ userId: userId, role: selectedRole })
                        })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                Swal.fire("Success!", "User role updated successfully.", "success").then(() => {
                                    location.reload();
                                });
                            } else {
                                Swal.fire("Error!", "Failed to update role.", "error");
                            }
                        })
                        .catch(error => {
                            console.error("Error:", error);
                            Swal.fire("Error!", "Something went wrong.", "error");
                        });
                    }
                });
            });
        });

        // ✅ DELETE USER FUNCTIONALITY WITH SWAL
        document.querySelectorAll(".delete-user-btn").forEach(button => {
            button.addEventListener("click", function () {
                let userId = this.getAttribute("data-user-id");

                Swal.fire({
                    title: "Are you sure?",
                    text: "You won't be able to recover this user!",
                    icon: "warning",
                    showCancelButton: true,
                    confirmButtonColor: "#d33",
                    cancelButtonColor: "#3085d6",
                    confirmButtonText: "Yes, delete it!"
                }).then((result) => {
                    if (result.isConfirmed) {
                        fetch('/User/DeleteUser', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'RequestVerificationToken': document.querySelector("input[name='__RequestVerificationToken']").value
                            },
                            body: JSON.stringify({ userId: userId })
                        })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                Swal.fire("Deleted!", "The user has been deleted.", "success").then(() => {
                                    location.reload();
                                });
                            } else {
                                Swal.fire("Error!", "Failed to delete user.", "error");
                            }
                        })
                        .catch(error => {
                            console.error("Error:", error);
                            Swal.fire("Error!", "Something went wrong.", "error");
                        });
                    }
                });
            });
        });
    </script>
}
